buildscript {
    ext.kotlin_version = '1.3.10'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

plugins {
    id 'de.gliderpilot.semantic-release' version '1.4.0'
    id "com.github.ben-manes.versions" version "0.20.0"
}

apply plugin: 'java'

repositories {
    mavenCentral()
}

def getVersionName = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'tag', '-l', '--points-at', 'HEAD'
        standardOutput = stdout
    }
    def version = stdout.toString().trim()
    return version
}

rootProject.version = getVersionName()

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-kapt'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'


    group 'de.maibornwolff.domainchoreograph'
    version = rootProject.version

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
    }

    jar {
        from sourceSets.main.allSource
    }

    if (name != 'examples') {
        apply plugin: 'com.jfrog.bintray'

        bintray {
            user = System.getenv('BINTRAY_USER')
            key = System.getenv('BINTRAY_KEY')
            configurations = ['archives']
            publications = ['maven']
            pkg {
                repo = rootProject.findProperty('de.maibornwolff.domainchoreograph.bintrayrepo')
                name = project.name
                licenses = ['Apache-2.0']
                vcsUrl = rootProject.findProperty('de.maibornwolff.domainchoreograph.github.url')
            }
        }

        println "VERSION" + project.version
        publishing {
            publications {
                maven(MavenPublication) {
                    groupId project.group
                    artifactId project.name
                    version project.version

                    from components.java
                }
            }
        }
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

// RELEASE config

task sourcesJarCore(type: Jar) {
    def moduleName = 'core'
    classifier = moduleName
    from getRootProject().subprojects.findAll { it.name == moduleName }.sourceSets.main.output
}

task sourcesJarDomainAnalytics(type: Jar) {
    def moduleName = 'domain-analytics'
    classifier = moduleName
    from getRootProject().subprojects.findAll { it.name == moduleName }.sourceSets.main.output
}

task sourcesJarDomainAnalyticsLogger(type: Jar) {
    def moduleName = 'domain-analytics-logger'
    classifier = moduleName
    from getRootProject().subprojects.findAll { it.name == moduleName }.sourceSets.main.output
}

task sourcesJarDomainAnalyticsServer(type: Jar) {
    def moduleName = 'domain-analytics-server'
    classifier = moduleName
    from getRootProject().subprojects.findAll { it.name == moduleName }.sourceSets.main.output
}

task sourcesJarExamples(type: Jar) {
    def moduleName = 'examples'
    classifier = moduleName
    from getRootProject().subprojects.findAll { it.name == moduleName }.sourceSets.main.output
}

task sourcesJarExportDefinitions(type: Jar) {
    def moduleName = 'export-definitions'
    classifier = moduleName
    from getRootProject().subprojects.findAll { it.name == moduleName }.sourceSets.main.output
}

task uploadIfVersionIsSet() {
}

if (rootProject.version != '') {
    bintrayUpload.dependsOn(build)
    bintrayPublish.dependsOn(bintrayUpload)
    uploadIfVersionIsSet.dependsOn(bintrayPublish)
}

semanticRelease {
    repo.ghToken = System.getenv('GH_TOKEN')

    repo {
        releaseAsset sourcesJarCore
        releaseAsset sourcesJarDomainAnalytics
        releaseAsset sourcesJarDomainAnalyticsLogger
        releaseAsset sourcesJarDomainAnalyticsServer
        releaseAsset sourcesJarExamples
        releaseAsset sourcesJarExportDefinitions
    }
}

