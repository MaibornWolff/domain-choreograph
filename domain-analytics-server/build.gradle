buildscript {

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.4"
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'kotlin'
apply plugin: 'application'

bintray {
    user = rootProject.findProperty('de.maibornwolff.domainchoreograph.bintrayuser')
    key = rootProject.findProperty('de.maibornwolff.domainchoreograph.bintraykey')
    configurations = ['archives']
    pkg {
        repo = rootProject.findProperty('de.maibornwolff.domainchoreograph.bintrayrepo')
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = rootProject.findProperty('de.maibornwolff.domainchoreograph.github.url')
    }
}

dependencies {
    compile project(':core')
    compile project(':export-definitions')

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "io.javalin:javalin:1.5.0"

    testCompile "org.junit.jupiter:junit-jupiter-api:5.1.1"
    testCompile "org.mockito:mockito-all:2.+"
    testCompile "com.nhaarman:mockito-kotlin:1.+"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

mainClassName = "de.maibornwolff.domainchoreograph.analyticsserver.DevtoolServerMain"

jar {
    manifest {
        attributes 'Main-Class': 'de.maibornwolff.domainchoreograph.analyticsserver.DevtoolServerMain'
    }

    // from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

// Frontend tasks
node {
    version = '9.11.1'
    yarnVersion = '1.5.1'
    download = true
    nodeModulesDir = file("${projectDir}/src/main/javascript/app/node_modules")
}

task setupWebapp(type: YarnTask) {
    workingDir = file("${projectDir}/src/main/javascript/app")
    args = ['install', '--prefer-offline', '--pure-lockfile']
}

task testWebapp(type: YarnTask) {
    workingDir = file("${projectDir}/src/main/javascript/app")
    args = ['test']
}

task buildWebapp(type: YarnTask) {
    workingDir = file("${projectDir}/src/main/javascript/app")
    args = ['build']
}

task prepareResources(type: Copy) {
    from file("${projectDir}/src/main/javascript/app/dist")
    into file("${projectDir}/src/main/resources/webapp")
    include '**/*.*'
}

buildWebapp.dependsOn(setupWebapp)
testWebapp.dependsOn(setupWebapp)
prepareResources.dependsOn(buildWebapp)
processResources.dependsOn(prepareResources)
